import React from 'react';
import * as yup from 'yup';
import { Story } from '@storybook/react';
import useTranslation from 'next-translate/useTranslation';
import thaiIdValidation from '../lib/thaiId';
import QuestionFlow, { QuestionFlowProps } from './QuestionFlow';
import { insurerBanksData } from './QuestionFlow.mock';

export default {
  title: 'Components/QuestionFlow',
  component: QuestionFlow,
  argTypes: {
    locale: {
      options: ['en', 'th'],
      control: { type: 'radio' },
    },
  },
  onConfigUpdate: { action: 'config updated' },
  onAnswer: { action: 'answered' },
  onSubmit: { action: 'submitted' },
};

const Template: Story<Omit<QuestionFlowProps, 't'>> = (args) => {
  const { t } = useTranslation();
  return <QuestionFlow t={t} {...args} />;
};
const carBrand = {
  code: 'car_brand',
  label: 'Car Brand',
  isPlaceHolder: true, // To show initial text 'select' on select dropdown
  buttonsPerRow: 3, // up to 4 buttons per row
  singleChoices: [
    { label: 'Toyota', value: 'toyota' },
    { label: 'Honda', value: 'honda' },
    { value: 'mazda', label: 'Mazda' },
  ],
  // If use the same value of single choices, it will be automatically selected if single choices selected
  selectOptions: [
    {
      value: '',
      label: 'Please select',
    },
    {
      value: 'toyota',
      label: 'Toyota',
    },
    { label: 'Honda', value: 'honda' },
    {
      value: 'mazda',
      label: 'Mazda',
    },
    {
      value: 'isuzu',
      label: 'Isuzu',
    },
  ],
  section: 'car',
  tipText:
    'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consectetur deserunt dolorem dolo',
  type: 'combo_radio_select',
};

export const Default = Template.bind({});
Default.args = {
  initialValues: {
    email: '',
    phone: '0999999999',
    tc: '1',
  },
  initialConfig: {
    questions: {
      email: {
        code: 'email',
        label: 'Email',
        section: 'driver',
        tipText: 'tooltips email',
        type: 'email',
      },
      first_name: {
        type: 'multi_question',
        code: 'first_name',
        section: 'driver',
        questions: [
          {
            code: 'first_name',
            label: 'First Name',
            tipText: 'first_name',
            type: 'text',
            placeholder: 'First Name',
          },
          {
            code: 'last_name',
            label: 'Last Name',
            tipText: 'tooltips last_name',
            type: 'text',
            placeholder: 'Last Name',
          },
        ],
      },
      phone: {
        code: 'phone',
        label: 'Phone',
        section: 'tel',
        tipText: 'tooltips phone',
        type: 'phone',
        placeholder: 'placeholders.phone',
      },
      tc: {
        code: 'tc',
      },
    },
    sections: {
      driver: {
        code: 'driver',
        label: 'Driver',
        questions: ['first_name', 'email'],
      },
      tel: {
        code: 'tel',
        label: 'Tel',
        questions: ['phone'],
      },
    },
    questionOrder: ['first_name', 'last_name', 'email', 'phone', 'tc'],
  },
  validationSchema: yup.object().shape({
    email: yup
      .string()
      .matches(
        /^[\w-\\.]+@([\w-]+\.)+[\w-]{2,4}$/,
        'common:validation.invalid_email'
      )
      .email()
      .required(),
  }),
  initialQuestionsVisibility: {
    first_name: true,
    email: false,
    phone: false,
    tc: false,
  },
  initialSectionsVisibility: {
    driver: true,
    tel: false,
  },

  marketingConsent: {
    submitLabel: 'Submit',
    htmlTop: <div style={{ color: 'red' }}>text</div>,
    htmlBottom: <div>text</div>,
  },
  onConfigUpdate: () => null,
  // Trigger when user answer the question
  onAnswer: () => null,
  onSubmit: () => null,

  // To show confirm button instead of next button
  showConfirm: false,
};
export const WithSelectRadioBox = Template.bind({});
WithSelectRadioBox.args = {
  ...Default.args,

  initialValues: {
    car_brand: '',
    tc: '1',
  },
  initialConfig: {
    questions: {
      has_car: {
        code: 'has_car',
        label: 'Do you have a car?',
        buttonsPerRow: 2,
        singleChoices: [
          { label: 'yes', value: 'true' },
          { label: 'no', value: 'false' },
        ],
        section: 'car',
        type: 'combo_radio_select',
      },
      car_brand: carBrand,
      tc: {
        code: 'tc',
      },
    },
    sections: {
      car: {
        code: 'car',
        label: 'Car',
        questions: ['has_car', 'car_brand'],
      },
    },
    questionOrder: ['has_car', 'car_brand', 'tc'],
  },
  initialQuestionsVisibility: {
    has_car: true,
    car_brand: false,
    tc: false,
  },
  initialSectionsVisibility: {
    car: true,
  },
};
export const WithPriceInput = Template.bind({});
WithPriceInput.args = {
  ...Default.args,

  initialValues: {
    car_brand: '',
    car_loan_price: '',
    tc: '1',
  },
  initialConfig: {
    questions: {
      car_brand: carBrand,
      car_loan_price: {
        code: 'car_loan_price',
        type: 'price',
        tipText: 'tooltips phone',
        label: 'Car Loan Label',
        currency: 'THB',
        showIcon: true,
        section: 'car',
        subLabel: (
          <div>
            Current Value of your car :
            <b style={{ color: '#035098', marginRight: '0.4rem' }}>
              500,000 THB
            </b>
            <br />
            (reference Price)
          </div>
        ),
      },
      tc: {
        code: 'tc',
      },
    },
    sections: {
      car: {
        code: 'car',
        label: 'Car',
        questions: ['car_brand', 'car_loan_price'],
      },
    },
    questionOrder: ['car_brand', 'car_loan_price', 'tc'],
  },
  validationSchema: yup.object().shape({
    car_loan_price: yup.number().required().max(500000),
  }),
  initialQuestionsVisibility: {
    car_brand: true,
    car_loan_price: false,
    tc: false,
  },
  initialSectionsVisibility: {
    car: true,
  },
};

export const WithRichMultiChoice = Template.bind({});
WithRichMultiChoice.args = {
  ...Default.args,

  initialValues: {
    car_brand: '',
    email: '',
    rich_multi_choice: [],
    tc: '1',
  },
  initialConfig: {
    questions: {
      car_brand: carBrand,
      email: {
        code: 'email',
        label: 'Email',
        section: 'car',
        tipText: 'tooltips email',
        type: 'email',
      },
      rich_multi_choice: {
        section: 'car',
        code: 'rich_multi_choice',
        type: 'rich_multi_choice',
        label: 'Rich Multi Choice',
        limitationText: (
          <span
            style={{
              color: '#005098',
              fontSize: '1rem',
            }}
          >
            * Thai citizenship only
          </span>
        ),
        description: {
          text: 'Rich Multi Choice Description',
          tip: 'Rich Multi Choice Tip Text',
        },
        checkbox: {
          label: 'Let Rabbit Care choose for you?',
          value: '1',
        },
        items: insurerBanksData,
        subLabel: (
          <div>
            Current Value of your car :
            <b style={{ color: '#035098', marginRight: '0.4rem' }}>
              {' '}
              500,000 THB
            </b>
            <br />
            (reference Price)
          </div>
        ),
      },
      tc: {
        code: 'tc',
      },
    },
    sections: {
      car: {
        code: 'car',
        label: 'Car',
        questions: ['car_brand', 'email', 'rich_multi_choice'],
      },
    },
    questionOrder: ['car_brand', 'email', 'rich_multi_choice', 'tc'],
  },
  validationSchema: yup.object().shape({}),
  initialQuestionsVisibility: {
    car_brand: true,
    rich_multi_choice: false,
    tc: false,
  },
  initialSectionsVisibility: {
    car: true,
  },
};

export const WithMultiSelectField = Template.bind({});
WithMultiSelectField.args = {
  ...Default.args,
  initialValues: {
    car_brand: '',
    multi_select_field: [],
    tc: '1',
  },
  initialConfig: {
    questions: {
      car_brand: carBrand,
      multi_select_field: {
        section: 'car',
        code: 'multi_select_field',
        type: 'multi_select_field',
        label: 'Multi Select Field',
        items: insurerBanksData.map(({ name, id, logo }) => ({
          name,
          id,
          logo,
        })),
      },
      tc: {
        code: 'tc',
      },
    },
    sections: {
      car: {
        code: 'car',
        label: 'Car',
        questions: ['car_brand', 'multi_select_field'],
      },
    },
    questionOrder: ['car_brand', 'multi_select_field', 'tc'],
  },
  validationSchema: yup.object().shape({
    multi_select_field: yup
      .array()
      .min(1)
      .required('common:validation.required'),
  }),
  initialQuestionsVisibility: {
    car_brand: true,
    multi_select_field: false,
    tc: false,
  },
  initialSectionsVisibility: {
    car: true,
  },
};

/**
 * standaloned email and phones should be worked well.
 */
export const WithStandalonePhoneAndEmail = Template.bind({});

WithStandalonePhoneAndEmail.args = {
  initialValues: {
    email: '',
    phone: '',
    tc: '1',
  },
  initialConfig: {
    questions: {
      phone: {
        code: 'phone',
        label: 'Phone',
        section: 'tel',
        tipText: 'tooltips phone',
        type: 'phone',
        placeholder: 'placeholders.phone',
      },
      email: {
        code: 'email',
        label: 'Email',
        section: 'tel',
        tipText: 'tooltips email',
        type: 'email',
      },
      tc: {
        code: 'tc',
      },
    },
    sections: {
      tel: {
        code: 'tel',
        label: 'Personal Info',
        questions: ['phone', 'email'],
      },
    },
    questionOrder: ['phone', 'email', 'tc'],
  },
  validationSchema: yup.object().shape({
    phone: yup
      .string()
      .matches(/((^(02|03|04|05|07)\d{7}$)|(^(08|09|06)\d{8}$))/, {
        message: 'common:validation.invalid_phone',
      })
      .max(10)
      .required('common:validation.required'),
    email: yup
      .string()
      .matches(
        /^[\w-\\.]+@([\w-]+\.)+[\w-]{2,4}$/,
        'common:validation.invalid_email'
      )
      .email('common:validation.invalid_email')
      .required(),
  }),
  initialQuestionsVisibility: {
    phone: true,
    email: false,
    tc: false,
  },
  initialSectionsVisibility: {
    tel: true,
  },

  marketingConsent: {
    submitLabel: 'Submit',
    htmlTop: <div style={{ color: 'red' }}>text</div>,
    htmlBottom: <div>text</div>,
  },
  onConfigUpdate: () => null,
  // Trigger when user answer the question
  onAnswer: () => null,
  onSubmit: () => null,

  // To show confirm button instead of next button
  showConfirm: false,
};

export const WithMultiQuesitonForPhoneAndEmail = Template.bind({});
WithMultiQuesitonForPhoneAndEmail.args = {
  initialValues: {
    email: '',
    phone: '',
    tc: '1',
  },
  initialConfig: {
    questions: {
      phone: {
        code: 'phone',
        type: 'multi_question',
        section: 'tel',
        questions: [
          {
            code: 'phone',
            label: 'Phone',
            section: 'tel',
            tipText: 'tooltips phone',
            type: 'phone',
            placeholder: 'placeholders.phone',
          },
          {
            code: 'email',
            label: 'Email',
            section: 'tel',
            tipText: 'tooltips email',
            type: 'email',
          },
        ],
      },
      tc: {
        code: 'tc',
      },
    },
    sections: {
      tel: {
        code: 'tel',
        label: 'Personal Info',
        questions: ['phone'],
      },
    },
    questionOrder: ['phone', 'email', 'tc'],
  },
  validationSchema: yup.object().shape({
    phone: yup
      .string()
      .matches(/((^(02|03|04|05|07)\d{7}$)|(^(08|09|06)\d{8}$))/, {
        message: 'common:validation.invalid_phone',
      })
      .max(10)
      .required('common:validation.required'),
    email: yup
      .string()
      .matches(
        /^[\w-\\.]+@([\w-]+\.)+[\w-]{2,4}$/,
        'common:validation.invalid_email'
      )
      .email()
      .required(),
  }),
  initialQuestionsVisibility: {
    phone: true,
    tc: false,
  },
  initialSectionsVisibility: {
    tel: true,
  },

  marketingConsent: {
    submitLabel: 'Submit',
    htmlTop: <div style={{ color: 'red' }}>text</div>,
    htmlBottom: <div>text</div>,
  },
  onConfigUpdate: () => null,
  // Trigger when user answer the question
  onAnswer: () => null,
  onSubmit: () => null,

  // To show confirm button instead of next button
  showConfirm: false,
};

export const WithThaiID = Template.bind({});

WithThaiID.args = {
  initialValues: {
    thai_id: '',
  },
  initialConfig: {
    questions: {
      thai_id: {
        code: 'thai_id',
        label: 'Thai national ID',
        section: 'tel',
        tipText: 'tooltips Thai ID',
        placeholder: 'placeholders.thai_id',
        type: 'thai_id',
      },
    },
    sections: {
      tel: {
        code: 'tel',
        label: 'Personal Info',
        questions: ['thai_id'],
      },
    },
    questionOrder: ['thai_id'],
  },
  validationSchema: yup.object().shape({
    thai_id: thaiIdValidation(),
  }),
  initialQuestionsVisibility: {
    thai_id: true,
  },
  initialSectionsVisibility: {
    tel: true,
  },

  marketingConsent: {
    submitLabel: 'Submit',
    htmlTop: <div style={{ color: 'red' }}>text</div>,
    htmlBottom: <div>text</div>,
  },
  onConfigUpdate: () => null,
  // Trigger when user answer the question
  onAnswer: () => null,
  onSubmit: () => null,

  // To show confirm button instead of next button
  showConfirm: false,
};
