import React, { ReactElement, useState, useEffect } from 'react';
import { FormikProps, FormikValues } from 'formik';
import clsx from 'clsx';

import ValidIcon from '../../public/icons/common/valid-icon.svg';
import TextFieldLayout from './TextFieldLayout';

export type PriceProps = {
  t: (s: string) => string;
  formik: FormikProps<FormikValues> | any;
  handleNextButton: (fieldName: string, values: Record<string, any>) => void;
  handleInputChange: (fieldName: string, value: string | number) => void;
  question: {
    code: string;
    tipText?: string;
    label: string;
    subLabel?: ReactElement | string;
    showIcon?: boolean;
    currency: string;
  };
  isConfirmButton?: boolean;
};

const Price = ({
  t,
  formik,
  handleNextButton,
  handleInputChange,
  question,
  isConfirmButton,
}: PriceProps): ReactElement => {
  const [value, setValue] = useState(formik.values[question.code]);
  const isValid = () => {
    return (
      formik.touched[question.code] &&
      (!formik.errors[question.code] ? 'is-valid' : 'is-invalid')
    );
  };

  const showIcon = () =>
    formik.touched[question.code] &&
    (!formik.errors[question.code] ? <ValidIcon /> : null);

  const addCommas = (num: number) =>
    num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  const removeNonNumeric = (num: string) => Number(num.replace(/[^0-9]/g, ''));

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setValue(addCommas(removeNonNumeric(event.target.value)));
    const inputValue = parseFloat(event.target.value.replace(/,/g, ''));
    handleInputChange(question.code, inputValue);
  };

  useEffect(() => {
    if (formik.values[question.code]) {
      setValue(addCommas(formik.values[question.code]));
    } else {
      setValue('');
    }
  }, [formik.values, value, question?.code]);

  return (
    <TextFieldLayout
      t={t}
      tip={question.tipText}
      label={t(question.label)}
      subLabel={question.subLabel}
      questionCode={question.code}
      handleNextButton={handleNextButton}
      formik={formik}
      isConfirmButton={isConfirmButton}
    >
      {(handleKeyDown: React.KeyboardEventHandler<HTMLInputElement> | any) => (
        <div className={clsx(['price-input-group', 'input-group', isValid()])}>
          <input
            id={`price-${question.code}`}
            name={question.code}
            type="text"
            value={value}
            className={`price-input form-control ${isValid()}`}
            aria-describedby="priceHelp"
            placeholder={t('common:placeholders.price')}
            onKeyDown={handleKeyDown}
            onChange={handleChange}
          />

          <div className="input-group-append">
            <span
              className={`
                input-group-text
                  ${isValid()}
                `}
            >
              {!!question.currency && <span>{t(question.currency)}</span>}
              {question.showIcon ? showIcon() : ''}
            </span>
          </div>
        </div>
      )}
    </TextFieldLayout>
  );
};

export default Price;
