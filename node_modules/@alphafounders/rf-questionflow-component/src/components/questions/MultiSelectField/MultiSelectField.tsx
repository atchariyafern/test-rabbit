import React, { ReactElement, useState, useEffect } from 'react';
import { FormikProps, FormikValues } from 'formik';
import TextFieldLayout from '../TextFieldLayout';
import './MultiSelectField.modules.scss';
import Item, { IItem } from './Item';

export type MultiSelectFieldProps = {
  t: (s: string) => string;
  formik: FormikProps<FormikValues> | any;
  handleNextButton: (fieldName: string, values: Record<string, any>) => void;
  handleInputChange: (fieldName: string, value: Record<string, any>) => void;
  isConfirmButton: boolean;
  question: {
    code: string;
    tipText?: string;
    label: string;
    showIcon?: boolean;
    items: Array<IItem>;
  };
};

const MultiSelectField = ({
  t,
  formik,
  handleNextButton,
  handleInputChange,
  question,
  isConfirmButton,
}: MultiSelectFieldProps): ReactElement => {
  const [values, setValues] = useState<{ [key: string]: boolean }>({});

  useEffect(() => {
    const initialValues = question.items.reduce(
      (currentValues: any, checkbox: { id: any }) => {
        return {
          ...currentValues,
          [checkbox.id]: formik.values[question.code]
            ? formik.values[question.code].includes(checkbox.id)
            : false,
        };
      },
      {}
    );
    setValues(initialValues);
  }, [formik.values, question]);

  const handleSelect = (selectedItem: any, selected: Array<string>) => {
    let selectedItems = selected;
    if (selectedItems.indexOf(selectedItem.id) < 0) {
      if (selectedItem.isReset) {
        selectedItems = [];
      }
      selectedItems.push(selectedItem.id);
    } else {
      selectedItems.splice(selectedItems.indexOf(selectedItem.id), 1);
    }
    return selectedItems;
  };

  const clickOnCard = (selectedItem: any) => {
    let newSelectedArr = [...formik.values[question.code]];
    const resetItem = question.items.find((i) => i.isReset);
    if (selectedItem.isReset) {
      newSelectedArr = handleSelect(selectedItem, newSelectedArr);
    } else {
      if (newSelectedArr.indexOf(resetItem?.id) >= 0) {
        newSelectedArr.splice(newSelectedArr.indexOf(resetItem?.id), 1);
      }
      newSelectedArr = handleSelect(selectedItem, newSelectedArr);
    }

    handleInputChange(question.code, newSelectedArr);
  };

  return (
    <TextFieldLayout
      t={t}
      tip={question.tipText}
      label={t(question.label)}
      questionCode={question.code}
      handleNextButton={handleNextButton}
      formik={formik}
      isConfirmButton={isConfirmButton}
    >
      {() => (
        <div className="multi-select">
          <div className={`${'multi-select__card-section'}`}>
            {question?.items.length &&
              question?.items.map((item: any) => {
                return (
                  <Item
                    key={item.id}
                    t={t}
                    item={item}
                    handleInputChange={() => clickOnCard(item)}
                    isChecked={values[item.id]}
                  />
                );
              })}
          </div>
        </div>
      )}
    </TextFieldLayout>
  );
};

export default MultiSelectField;
