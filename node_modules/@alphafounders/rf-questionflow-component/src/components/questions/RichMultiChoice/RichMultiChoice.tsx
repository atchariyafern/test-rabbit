import React, { ReactElement, useState, useEffect } from 'react';
import { FormikProps, FormikValues } from 'formik';

import TextFieldLayout from '../TextFieldLayout';
import ChecklistItem from '../Checklist/Item';
import Modal from '../../common/Modal';
import Item, { IItem } from './Item';
import './RichMultiChoice.module.scss';

export type RichMultiChoiceProps = {
  t: (s: string) => string;
  formik: FormikProps<FormikValues> | any;
  handleNextButton: (fieldName: string, values: Record<string, any>) => void;
  handleInputChange: (fieldName: string, value: Record<string, any>) => void;
  question: {
    code: string;
    tipText?: string;
    label: string;
    subLabel?: ReactElement | string;
    showIcon?: boolean;
    description?: Record<string, any>;
    checkbox?: Record<string, any>;
    limitationText: ReactElement | string;
    items: Array<IItem>;
  };
  selectableRange?: number;
  isConfirmButton?: boolean;
  recommendedItems?: Array<string | number>;
};

const RichMultiChoice = ({
  t,
  formik,
  handleNextButton,
  handleInputChange,
  question,
  selectableRange = 3,
  isConfirmButton,
  recommendedItems = [],
}: RichMultiChoiceProps): ReactElement => {
  const [isRecommended, setIsRecommended] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [values, setValues] = useState<{ [key: string]: boolean }>({});
  useEffect(() => {
    const initialValues = question.items.reduce((currentValues, checkbox) => {
      return {
        ...currentValues,
        [checkbox.id]: formik.values[question.code]
          ? formik.values[question.code].includes(checkbox.id)
          : false,
      };
    }, {});
    setValues(initialValues);
  }, [formik.values, question]);

  const handleValueChange = () => {
    setIsRecommended(!isRecommended);
    if (isRecommended) {
      handleInputChange(question.code, []);
    } else {
      handleInputChange(question.code, recommendedItems);
    }
  };

  const handleSelectUnselect = (section: Array<string>, bankId: string) => {
    if (section.length < selectableRange) {
      section.push(bankId);
    } else {
      setShowModal(true);
    }
    return section;
  };

  const clickOnCard = (
    selectedBank: string,
    selectedStatus: boolean | undefined
  ) => {
    let newSelectedArr = [...formik.values[question.code]];
    if (selectedStatus) {
      if (recommendedItems.includes(selectedBank) && isRecommended) {
        setIsRecommended(false);
      }
      newSelectedArr.splice(newSelectedArr.indexOf(selectedBank), 1);
    } else {
      newSelectedArr = [...handleSelectUnselect(newSelectedArr, selectedBank)];
    }
    handleInputChange(question.code, newSelectedArr);
  };

  const onClose = () => setShowModal(false);

  return (
    <TextFieldLayout
      t={t}
      tip={question.tipText}
      label={t(question.label)}
      subLabel={question.subLabel}
      questionCode={question.code}
      handleNextButton={handleNextButton}
      formik={formik}
      isConfirmButton={isConfirmButton}
      description={question.description}
      alwaysShowIcon={!!question.description?.tip}
      limitationText={question.limitationText}
    >
      {() => (
        <div className="rich-multichoice">
          <div className="input-group">
            <ChecklistItem
              t={t}
              item={question.checkbox}
              isChecked={isRecommended}
              onChange={handleValueChange}
            />
          </div>
          <div className="rich-multichoice__card-section-wrapper">
            {question.items.length &&
              question.items.map((item: IItem) => {
                return (
                  <Item
                    t={t}
                    item={item}
                    handleInputChange={clickOnCard}
                    isChecked={values[item.id]}
                  />
                );
              })}
          </div>
          {showModal && (
            <Modal isOpen={showModal} onClose={onClose}>
              <div className="text-center align-middle">
                <div style={{ marginBottom: '10px' }}>
                  {t('common:modal.text')}
                </div>
                <button
                  type="button"
                  className="btn btn-primary text-uppercase btn-md"
                  onClick={onClose}
                >
                  {t('common:buttons.close')}
                </button>
              </div>
            </Modal>
          )}
        </div>
      )}
    </TextFieldLayout>
  );
};

export default RichMultiChoice;
