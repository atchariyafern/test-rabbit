import React, {
  useEffect,
  useState,
  useImperativeHandle,
  forwardRef,
  KeyboardEventHandler,
  KeyboardEvent,
} from 'react';
import { FormikProps, FormikValues } from 'formik';
import HelpTool from '../common/HelpTool';
import NextButton from './NextButton';
import ErrorMessage from './ErrorMessage';

export interface TextFieldLayoutProps {
  t: (s: string) => string;
  formik: FormikProps<FormikValues> | any;
  label: string;
  tip?: string;
  subLabel?:
    | string
    | React.ReactElement<any, string | React.JSXElementConstructor<any>>;
  children: (event: KeyboardEventHandler<HTMLInputElement>) => JSX.Element;
  questionCode: string;
  isVisible?: boolean;
  showNextButton?: boolean;
  description?: {
    text: string;
    tip?: string;
  };
  limitationText?: string;
  alwasysShowIcon?: boolean;
  handleNextButton?: (fieldName: string, values: Record<string, any>) => void;
  isConfirmButton?: boolean;
}

// Use forwardRef and useImperativeHandle because we need to trigger hiding the
// button from parent component. Not happy with it, but best we can do for now
const TextFieldLayout = forwardRef(
  (
    {
      t,
      formik,
      label,
      tip,
      subLabel,
      children,
      questionCode,
      isVisible = true,
      showNextButton = false,
      description,
      limitationText,
      handleNextButton,
      isConfirmButton,
    }: TextFieldLayoutProps,
    ref
  ) => {
    const [showButton, setShowButton] = useState(true);
    const [submittedValue, setSubmittedValue] = useState(null);
    const handleButton = () => {
      if (handleNextButton) {
        handleNextButton(questionCode, formik.values[questionCode]);
      }
      setSubmittedValue(formik.values[questionCode]);
      setShowButton(false);
    };
    const formikValue = formik.values[questionCode];

    useImperativeHandle(ref, () => ({
      clickNext: () => {
        handleButton();
      },
    }));

    const handleKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {
      if (event.key === 'Enter') {
        if (!formik.errors[questionCode]) {
          handleButton();
        }
      }
    };

    useEffect(() => {
      if (!showButton && formikValue !== submittedValue) {
        setShowButton(true);
      }
      // We don't care showButton dependences in case
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [formikValue, submittedValue]);

    const errorMessage =
      formik.errors[questionCode] && formik.touched[questionCode]
        ? formik.errors[questionCode]
        : '';

    return (
      <>
        <div
          className="form-group"
          style={{
            display: isVisible ? 'block' : 'none',
          }}
        >
          <div className="row">
            <div className="col-lg question-label">
              <label htmlFor={questionCode}>{label}</label>
              {tip && <HelpTool t={t} tip={t(tip)} />}
              {limitationText && (
                <div className="description-text">{limitationText}</div>
              )}
              {description && (
                <div className="description-text">
                  {description.text}
                  {description.tip && (
                    <HelpTool t={t} tip={t(description.tip)} alwaysShowIcon />
                  )}
                </div>
              )}
              {subLabel && <div className="sub-label">{subLabel}</div>}
            </div>
            <div className="col-lg">
              {children(handleKeyDown)}
              <ErrorMessage t={t} message={errorMessage} />
            </div>
          </div>
        </div>

        {!showNextButton && (
          <div className="row">
            <div className="col-12 text-right col-lg-3 offset-lg-9">
              <NextButton
                t={t}
                isConfirmButton={isConfirmButton}
                isVisible={showButton}
                onClick={() => handleButton()}
                isDisabled={formik.errors[questionCode]}
              />
            </div>
          </div>
        )}
      </>
    );
  }
);

export default TextFieldLayout;
