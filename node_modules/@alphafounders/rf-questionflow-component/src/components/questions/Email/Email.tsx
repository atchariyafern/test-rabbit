import clsx from 'clsx';
import Downshift, { ControllerStateAndHelpers } from 'downshift';
import React, { useRef, useState } from 'react';
import TextFieldLayout from '../TextFieldLayout';
import { emails } from './const';
import { EmailDropdownItemProps, EmailItem, EmailProps } from './types';

const EmailDropdownItem: React.FC<
  EmailDropdownItemProps & React.HTMLProps<HTMLLIElement>
> = ({ item, className, ...rest }) => (
  <li
    className={clsx('list-group-item email-dropdown__list-item', className)}
    {...rest}
  >
    {`${item.username}@${item.domain}`}
  </li>
);

const Email: React.FC<EmailProps & React.HTMLProps<HTMLInputElement>> = ({
  t,
  isVisible = true,
  showNextButton = false,
  formik,
  handleNextButton,
  question,
  isConfirmButton,
  handleChange,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  fieldName,
  ...rest
}: EmailProps & React.HTMLProps<HTMLInputElement>) => {
  const value = useRef<string>();

  const [suggestionEmails, setSuggestionEmails] = useState(emails);

  const itemToString = (item: EmailItem | null): string => {
    return item ? `${item.username}@${item.domain}` : value.current || '';
  };

  const handleValueChange = (inputValue: string) => {
    if (formik?.values[question.code] !== inputValue) {
      formik.setFieldValue(question.code, inputValue);
    }
  };

  const onInputValueChange = (
    inputValue: string,
    { selectedItem, clearSelection }: ControllerStateAndHelpers<EmailItem>
  ) => {
    if (selectedItem) {
      clearSelection();
    }
    value.current = inputValue;
  };

  return (
    <Downshift
      itemToString={itemToString}
      onChange={(selection) => {
        if (selection) {
          handleValueChange(`${selection?.username}@${selection?.domain}`);
        }
      }}
      onInputValueChange={onInputValueChange}
    >
      {({
        getInputProps,
        getItemProps,
        getMenuProps,
        isOpen,
        inputValue,
        highlightedIndex,
        getRootProps,
        selectItemAtIndex,
      }: ControllerStateAndHelpers<EmailItem>) => {
        const username = inputValue?.split('@')[0];

        const shouldOpenSuggestion =
          isOpen && !!inputValue && suggestionEmails?.length;

        const isValid =
          formik.touched[question.code] && !formik.errors[question.code];
        const isInvalid =
          formik.touched[question.code] &&
          formik.errors[question.code] &&
          !shouldOpenSuggestion;

        return (
          <TextFieldLayout
            t={t}
            isVisible={isVisible}
            showNextButton={showNextButton}
            tip={question.tipText}
            label={t(question.label)}
            questionCode={question.code}
            handleNextButton={handleNextButton}
            formik={formik}
            isConfirmButton={isConfirmButton}
            {...getRootProps()}
          >
            {(handleKeyDown) => {
              const { onChange: onFormikChange, ...restFormikProps } =
                formik.getFieldProps(question.code);

              const inputProps = getInputProps({
                onChange: (e: React.ChangeEvent<HTMLInputElement>) => {
                  const domain = e.target.value.split('@')[1];
                  setSuggestionEmails(
                    emails.filter((email) => {
                      return (
                        !domain || email.domain.startsWith(domain.toLowerCase())
                      );
                    })
                  );
                  formik?.setFieldTouched(question.code, true);
                  onFormikChange(e);
                  handleChange?.(e, inputValue || '');
                },
              });

              const handleOnKeyDown = (
                e: React.KeyboardEvent<HTMLInputElement>
              ) => {
                if (inputProps.onKeyDown) {
                  inputProps.onKeyDown(e);
                }

                if (
                  e.key === 'Enter' &&
                  suggestionEmails.length &&
                  value.current
                ) {
                  formik?.setFieldTouched(question.code, true);
                  selectItemAtIndex(highlightedIndex || 0);
                }
                handleKeyDown(e);
              };

              return (
                <div className="email-dropdown__input-group">
                  <input
                    {...rest}
                    id="email"
                    type="email"
                    className={clsx([
                      'form-control email-dropdown__input',
                      isValid && 'is-valid',
                      isInvalid && 'is-invalid',
                      shouldOpenSuggestion && 'email-dropdown__input__open',
                    ])}
                    aria-describedby="emailHelp"
                    placeholder={t('common:placeholders.email')}
                    data-testid="email-input"
                    {...inputProps}
                    {...restFormikProps}
                    onKeyDown={handleOnKeyDown}
                  />
                  {shouldOpenSuggestion ? (
                    <ul
                      className="list-group email-dropdown__list"
                      {...getMenuProps()}
                    >
                      {suggestionEmails
                        .map((mail) => ({ username, domain: mail.domain }))
                        .map((item, index) => {
                          const key = `${item.username}@${item.domain}`;
                          return (
                            <EmailDropdownItem
                              className={clsx(
                                highlightedIndex === index &&
                                  'email-dropdown__list-item__highlighted'
                              )}
                              item={item}
                              {...getItemProps({
                                key,
                                index,
                                item,
                                onClick: () => {
                                  formik?.setFieldTouched(question.code, true);
                                  formik?.handleChange(question.code)(key);
                                },
                              })}
                            />
                          );
                        })}
                    </ul>
                  ) : null}
                </div>
              );
            }}
          </TextFieldLayout>
        );
      }}
    </Downshift>
  );
};

export default Email;
