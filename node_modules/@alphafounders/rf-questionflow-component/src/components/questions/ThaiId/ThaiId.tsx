import React, { KeyboardEventHandler, useEffect } from 'react';
import clsx from 'clsx';
import { FormikProps, FormikValues } from 'formik';
import Cleave from 'cleave.js/react';
import TextFieldLayout from '../TextFieldLayout';

export interface ThaiIdProps {
  t: (s: string) => string;
  isVisible?: boolean;
  showNextButton?: boolean;
  formik: FormikProps<FormikValues> | any;
  handleChange?: (
    event: React.ChangeEvent<HTMLInputElement>,
    value: string
  ) => void;
  question: {
    tipText?: string;
    label: string;
    code: string;
  };
  handleNextButton?: (fieldName: string, values: Record<string, any>) => void;
  isConfirmButton?: boolean;
  ref?: HTMLDivElement;
}

const ThaiId: React.FC<ThaiIdProps & React.HTMLProps<HTMLInputElement>> = ({
  t,
  isVisible = true,
  showNextButton = false,
  formik,
  handleChange,
  question,
  handleNextButton,
  isConfirmButton = false,
  ref,
  ...rest
}: ThaiIdProps & React.HTMLProps<HTMLInputElement>) => {
  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { rawValue } = event.target as any;

    const modifiedEvent = event;
    modifiedEvent.target.value = rawValue;

    handleChange?.(modifiedEvent, rawValue);
  };

  useEffect(() => {
    // And trigger manual focus when our condition is meet
    // Problem is that it will trigger a focus at page load
    ref?.focus();
  }, [ref]);

  return (
    <TextFieldLayout
      t={t}
      tip={question.tipText}
      label={t(question.label)}
      questionCode={question.code}
      showNextButton={showNextButton}
      isVisible={isVisible}
      handleNextButton={handleNextButton}
      isConfirmButton={isConfirmButton}
      formik={formik}
    >
      {(handleKeyDown: KeyboardEventHandler<HTMLInputElement>) => {
        const isValid =
          formik.touched[question.code] && !formik.errors[question.code];
        const isInvalid =
          formik.touched[question.code] && formik.errors[question.code];

        const onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
          handleKeyDown(e);
          rest?.onKeyDown?.(e);
        };

        const onPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {
          const regExp = /^\d+$/;
          const clipboad = e.clipboardData.getData('text');
          if (!regExp.test(clipboad)) {
            e.preventDefault();
          }
          rest?.onPaste?.(e);
        };

        return (
          <>
            <Cleave
              {...rest}
              htmlRef={(r) => {
                // eslint-disable-next-line no-param-reassign
                ref = r;
              }}
              pattern="[0-9]*"
              inputMode="numeric"
              maxLength={17}
              className={clsx([
                'form-control',
                isValid && 'is-valid',
                isInvalid && 'is-invalid',
              ])}
              name={question.code}
              onChange={onChange}
              onPaste={onPaste}
              onKeyDown={onKeyDown}
              data-testid="thai-id-input"
              options={{
                blocks: [1, 4, 5, 2, 1],
                delimiter: '-',
                numericOnly: true,
              }}
              placeholder={t('common:placeholders.thai_id')}
            />
          </>
        );
      }}
    </TextFieldLayout>
  );
};

export default ThaiId;
