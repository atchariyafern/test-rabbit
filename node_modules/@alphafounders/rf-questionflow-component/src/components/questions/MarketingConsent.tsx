import React, { ReactElement, useEffect, useState } from 'react';
import LoadingSpinner from '../common/LoadingSpinner';
import QuestionContainer from './QuestionContainer';

export type MarketingConsentProps = {
  t: (s: string) => string;
  question: {
    code: string;
    optionY: string | number;
    optionN: string | number;
  };
  active: boolean;
  onSubmit: () => void;
  value?: string | boolean;
  onChange: (code: string, value: string | number) => void;
  eventQuestionDisplay: (section: string, question: string) => void;
  htmlTop: ReactElement | string;
  htmlBottom: ReactElement | string;
  submitLabel: string;
  isSubmitting: boolean;
};

const MarketingConsent = ({
  t,
  question: { code, optionY = '1', optionN = '0' },
  active,
  onSubmit,
  value,
  onChange,
  eventQuestionDisplay,
  htmlTop,
  htmlBottom,
  submitLabel,
  isSubmitting,
}: MarketingConsentProps): ReactElement => {
  const progressBarSize = 65;
  const [eventFired, setEventFired] = useState(false);
  const offset = (el: HTMLElement | null) => {
    const rect = el?.getBoundingClientRect() || { top: 0, left: 0 };
    const scrollLeft =
      window.pageXOffset || document.documentElement.scrollLeft;
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    return { top: rect.top + scrollTop, left: rect.left + scrollLeft };
  };

  useEffect(() => {
    if (!eventFired && active) {
      eventQuestionDisplay('terms', 'marketing_consent');
      setEventFired(true);
    }
  }, [eventFired, active]);

  const handleConsentClick = (consentValue: string | number) => {
    const $btnMarketingConsent = document.getElementById(
      'btn-marketing-consent'
    );
    window.scrollTo({
      top: offset($btnMarketingConsent).top - progressBarSize,
      behavior: 'smooth',
    });
    onChange(code, consentValue);
  };

  const handleShowQuoteClick = () => {
    onSubmit();
  };

  return (
    <QuestionContainer id="tc" hasBorderBottom={false} active={active}>
      <div className="row">
        <div className="col-12">
          <div className="mx-auto text-justify" style={{ maxWidth: '760px' }}>
            {htmlTop}
            <div className="row justify-content-md-center">
              <div className="col-6 col-md-4">
                <div className="form-check mb-4 mt-2">
                  <input
                    id={`${code}-1`}
                    className="form-check-input"
                    type="radio"
                    name={code}
                    onChange={() => handleConsentClick(optionY)}
                    value={optionY}
                    checked={value === optionY}
                    data-testid="tc-option-y"
                  />
                  <label
                    className="form-check-label w-100 rounded d-flex align-items-center justify-content-center"
                    htmlFor={`${code}-1`}
                    role="button"
                  >
                    {t('common:terms_conditions.choices.accept')}
                  </label>
                </div>
              </div>
              <div className="col-6 col-md-4">
                <div className="form-check mb-4 mt-2">
                  <input
                    id={`${code}-0`}
                    className="form-check-input"
                    type="radio"
                    name={code}
                    onChange={() => handleConsentClick(optionN)}
                    value={optionN}
                    checked={value === optionN}
                    data-testid="tc-option-n"
                  />
                  <label
                    className="form-check-label w-100 rounded d-flex align-items-center justify-content-center"
                    htmlFor={`${code}-0`}
                    role="button"
                  >
                    {t('common:terms_conditions.choices.decline')}
                  </label>
                </div>
              </div>
            </div>
            <div>{htmlBottom}</div>
          </div>
        </div>
      </div>
      <div className="col-lg-4 offset-lg-4">
        {isSubmitting ? (
          <LoadingSpinner small />
        ) : (
          <button
            type="button"
            className="btn btn-lg btn-primary text-uppercase btn-block mt-2"
            onClick={handleShowQuoteClick}
            disabled={value === null}
            id="btn-marketing-consent"
          >
            {submitLabel}
          </button>
        )}
      </div>
    </QuestionContainer>
  );
};

export default MarketingConsent;
