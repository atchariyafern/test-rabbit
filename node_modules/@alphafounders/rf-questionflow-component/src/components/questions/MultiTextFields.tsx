import React, { useEffect, useState } from 'react';
import { FormikProps, FormikValues } from 'formik';

import { evaluateCondition } from '../../lib/util';
import NextButton from './NextButton';
import TextField from './TextField';
import ComboRadioSelectBox from './ComboRadioSelectBox';
import Phone from './Phone';
import Email from './Email';
import ThaiId from './ThaiId';

export interface MultiTextProps {
  t: (s: string) => string;
  formik: FormikProps<FormikValues> | any;
  name: string;
  handleNextButton: (fieldName: string, values: Record<string, any>) => void;
  onDynamicQuestionChange: (
    nextQnIndex: string | number,
    fieldName: string,
    value: string | number,
    dependencyQuestions: Array<string>
  ) => void;
  questions: Array<any>;
  isConfirmButton?: boolean;
}

const MultiTextFields: React.FC<MultiTextProps> = ({
  t,
  formik,
  name,
  handleNextButton,
  questions,
  onDynamicQuestionChange,
  isConfirmButton,
}) => {
  let isNextButtonDisabled = false;
  const [values, setValues] = useState(formik.values);
  const [firstItem, setFirstItem] = useState(questions[0]);
  const [childQuestions, setChildQuestions] = useState<Array<any>>([]);
  const [dependents, setDependents] = useState<Array<string>>([]);
  const getChildQuestions = (code: string, value: any) => {
    return questions.filter((q) => {
      return (
        q.validation &&
        q.validation.requiredIf &&
        q.validation.requiredIf.field === code &&
        q.validation.requiredIf.value === value
      );
    });
  };

  // Check if button disabled
  questions.forEach((question) => {
    if (formik.errors[question.code]) {
      isNextButtonDisabled = true;
    }
  });

  const handleDynamic = (
    nextQnIndex: number,
    field: string,
    value: string | number
  ) => {
    if (nextQnIndex >= questions.length) return; // index out of bound
    if (questions[nextQnIndex].dynamic) {
      const nextQnCode = questions[nextQnIndex].code;

      // Get dependency questions in the same dynamic group
      const dependencyQuestions = [];
      // eslint-disable-next-line no-plusplus
      for (let i: number = nextQnIndex; i < questions.length; i++) {
        if (!questions[i].dynamic) {
          break;
        }
        dependencyQuestions.push(questions[i].code);
      }
      setDependents(dependencyQuestions);
      if (value > 0) {
        onDynamicQuestionChange(nextQnCode, field, value, dependencyQuestions);
      }
    }
  };

  const answers = questions.map((question) => {
    return formik.values[question.code];
  });
  const [showButton, setShowButton] = useState(true);

  const handleChange = (field: string, e: any) => {
    setValues({
      ...values,
      [field]: e.currentTarget.value,
    });
    formik.handleChange(e);
  };

  const handleButton = () => {
    handleNextButton(name, answers);
    setShowButton(false);
  };

  // need to specify handle `Enter` keydown event for text field layout which was using for mobile and phone
  // key down event was imperatively handled at textFieldLayout
  const handleNext = () => {
    if (!isNextButtonDisabled) {
      handleButton();
    }
  };

  const handleKeyDown = (event: React.KeyboardEvent) => {
    if (event.key === 'Enter') {
      handleNext();
    }
  };

  // need to provide formik handleBlur event for phone changes
  // otherwise, formik touched event won't be triggered
  const handlePhoneChange = (field: string, e: any) => {
    handleChange(field, e);
    formik.handleBlur(e);
  };

  useEffect(() => {
    if (!showButton) {
      setShowButton(true);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [values]);

  useEffect(() => {
    if (firstItem.singleChoices && firstItem.singleChoices.length) {
      const d = getChildQuestions(
        firstItem.code,
        formik.values[firstItem.code]
      );
      setShowButton(!!d.length);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [childQuestions]);

  useEffect(() => {
    if (questions && questions.length) {
      setFirstItem(questions[0]);
    }
  }, [questions]);

  const checkChildQuestions = (current: any, value: string | number) => {
    let c: Array<any> = [];
    if (current.singleChoices && current.singleChoices.length) {
      c = getChildQuestions(current.code, value);
    }
    setChildQuestions(c);
    if (!childQuestions.length) {
      handleButton();
    }
  };

  return (
    <>
      {questions.map((question, index) => {
        let result = true;
        const handleChangeForSingleChoice = (
          e: React.ChangeEvent<HTMLInputElement>
        ) => {
          handleChange(question.code, e);
          handleDynamic(index + 1, question.code, e.target.value);
          if (question.singleChoices.length) {
            checkChildQuestions(question, e.currentTarget.value);
          }
        };
        const validClass =
          formik.touched[question.code] &&
          (!formik.errors[question.code] ? 'is-valid' : 'is-invalid');
        if (question.displayCondition) {
          result = evaluateCondition(question, formik);
        }
        switch (question.type) {
          case 'phone':
            return (
              <Phone
                t={t}
                isVisible={result}
                showNextButton
                key={question.code}
                formik={formik}
                question={question}
                handleChange={(e: any) => handlePhoneChange(question.code, e)}
                handleNextButton={handleNext}
                isConfirmButton={false}
              />
            );
          case 'thai_id':
            return (
              <ThaiId
                t={t}
                isVisible={result}
                showNextButton
                key={question.code}
                formik={formik}
                question={question}
                handleChange={(e: any) => handlePhoneChange(question.code, e)}
                handleNextButton={handleNext}
                isConfirmButton={false}
              />
            );
          case 'email':
            return (
              <Email
                t={t}
                isVisible={result}
                showNextButton
                key={question.code}
                formik={formik}
                question={question}
                handleNextButton={handleNext}
                isConfirmButton={false}
              />
            );
          case 'text':
            return (
              <TextField
                t={t}
                isVisible={result}
                key={question.code}
                formik={formik}
                question={question}
                handleChange={handleChange}
                handleKeyDown={handleKeyDown}
                validClass={validClass}
              />
            );
          case 'combo_radio_select':
            return (
              <div
                className="form-group"
                key={question.code}
                style={{
                  display: result ? 'block' : 'none',
                }}
              >
                <ComboRadioSelectBox
                  t={t}
                  key={question.code}
                  formik={formik}
                  handleChange={handleChangeForSingleChoice}
                  fieldName={question.code}
                  label={question.label}
                  buttonsPerRow={question.buttonsPerRow}
                  singleChoices={question.singleChoices}
                  selectOptions={question.selectOptions}
                  sortOrder={question.sortLabels}
                  tip={question.tipText}
                  translations={question.translations}
                  defaultValue={question.defaultValue}
                  dependents={dependents}
                  onClick={handleChangeForSingleChoice}
                  highlightOnSelect={question.highlightOnSelect}
                />
              </div>
            );
          default:
        }
        return null;
      })}
      <div className="row">
        <div className="col-12 text-right col-lg-3 text-right offset-lg-9">
          <NextButton
            t={t}
            isVisible={showButton}
            onClick={handleButton}
            isDisabled={isNextButtonDisabled}
            isConfirmButton={isConfirmButton}
          />
        </div>
      </div>
    </>
  );
};

export default MultiTextFields;
