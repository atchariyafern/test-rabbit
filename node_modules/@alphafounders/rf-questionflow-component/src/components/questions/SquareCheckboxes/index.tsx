import React, { ChangeEvent, ReactElement, useEffect, useState } from 'react';
import { FormikProps, FormikValues } from 'formik';
import clsx from 'clsx';
import HelpTool from '../../common/HelpTool';
import CheckIcon from '../../../public/icons/common/check.svg';
import NextButton from '../NextButton';
import ErrorMessage from '../ErrorMessage';

export type SquareCheckboxesProps = {
  t: (s: string) => string;
  formik: FormikProps<FormikValues> | any;
  checkboxes: Record<string, any>;
  fieldName: string;
  onSubmit: (fieldName: string, values: Record<string, any>) => void;
  handleNextButton: (fieldName: string, values: Record<string, any>) => void;
  label: string;
  tip: string;
  isConfirmButton?: boolean;
  hasVerticalOption?: boolean;
};

const SquareCheckboxes = ({
  t,
  formik,
  checkboxes,
  fieldName,
  onSubmit,
  handleNextButton,
  label,
  tip,
  isConfirmButton,
  hasVerticalOption = false,
}: SquareCheckboxesProps): ReactElement => {
  const [showButton, setShowButton] = useState(true);
  const [values, setValues] = useState({}); // Object representing Checkbox name and their state [true / false]
  const [selectedValues, setSelectedValues] = useState([]); // List of selected Checkbox value
  useEffect(() => {
    const initialValues = checkboxes.reduce(
      (currentValues: any, checkbox: any) => {
        return {
          ...currentValues,
          [checkbox.value]: formik.values[fieldName]
            ? formik.values[fieldName].includes(checkbox.value)
            : false,
        };
      },
      {}
    );

    setValues(initialValues);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [checkboxes]);

  const handleNextClick = () => {
    handleNextButton(fieldName, selectedValues);
    setShowButton(false);
  };

  /**
   * @param {*} cbValue // checkbox value
   */
  const handleCbValueChange = (cbValue: string | number) => {
    // toggle cbValue
    values[cbValue] = !values[cbValue];

    const selected = [];
    Object.entries(values).forEach(([key, value]) => {
      value && selected.push(key);
    });
    onSubmit(fieldName, selected);
    setSelectedValues(selected);
    setValues(values);

    setShowButton(true);
  };

  const handleCheckboxChange = (
    e: ChangeEvent<HTMLInputElement>,
    checkbox: any
  ) => {
    if (checkbox.disabled) {
      e.stopPropagation();
      return;
    }
    handleCbValueChange(checkbox.value);
  };

  const errorMessage =
    formik?.errors[fieldName] && formik?.touched[fieldName]
      ? formik?.errors[fieldName]
      : '';

  const infoAreaClass = clsx(
    {
      'col-lg': hasVerticalOption,
      'col-lg-12 mb-2': !hasVerticalOption,
    },
    'question-label'
  );

  const optionAreaClass = clsx({
    'col-12': hasVerticalOption,
    'col-lg-6 d-flex': !hasVerticalOption,
  });

  const optionMainAreaClass = clsx({
    'col-lg': hasVerticalOption,
    'col-12': !hasVerticalOption,
  });

  const buttonAreaClass = clsx('col-12 text-right', {
    'col-lg-6 offset-lg-6': hasVerticalOption,
    'col-lg-3 offset-lg-9': !hasVerticalOption,
  });

  return (
    <div className="row">
      <div className={infoAreaClass}>
        <label>{t(label)}</label>
        {tip && <HelpTool t={t} tip={t(tip)} />}
      </div>
      <div className={optionMainAreaClass}>
        <div className="row">
          {checkboxes.map((checkbox: any) => (
            <div className={optionAreaClass} key={checkbox.label}>
              <div
                className={clsx('form-check mt-2 mb-3 d-flex', {
                  disabled: checkbox.disabled,
                })}
              >
                <input
                  id={checkbox.value}
                  type="checkbox"
                  {...formik.getFieldProps(fieldName)}
                  disabled={checkbox.disabled}
                  onChange={(e) => handleCheckboxChange(e, checkbox)}
                  checked={values[checkbox.value]}
                  data-testid={checkbox.value}
                />
                <label
                  className="form-check-label rounded p-3 font-weight-normal"
                  htmlFor={checkbox.value}
                  role="button"
                >
                  <span className="check-svg">
                    <CheckIcon width="10px" />
                  </span>
                  <h5 className="mb-0 form-check-title">
                    {t(checkbox.label)}
                    {checkbox.iconTitle && (
                      <span
                        className={`${checkbox.iconTitle} ml-2 text-success`}
                      />
                    )}
                  </h5>
                  <p className="form-check-subtitle mb-0">
                    {t(checkbox.title)}
                  </p>
                  <p className="form-check-body mb-0">{t(checkbox.desc)}</p>
                </label>
              </div>
            </div>
          ))}

          <div className="col-12">
            <ErrorMessage t={t} message={errorMessage} />
          </div>
        </div>
        <div className="row">
          <div className={buttonAreaClass}>
            <NextButton
              t={t}
              isVisible={showButton}
              isConfirmButton={isConfirmButton}
              onClick={handleNextClick}
              isDisabled={formik.errors[fieldName]}
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default SquareCheckboxes;
