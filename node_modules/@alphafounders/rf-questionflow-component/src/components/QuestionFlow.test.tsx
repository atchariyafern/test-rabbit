import React from 'react';
import { render, screen, waitFor, within } from '@testing-library/react';
import { composeStories } from '@storybook/testing-react';
import userEvent from '@testing-library/user-event';
import * as stories from './QuestionFlow.stories'; // import all stories from the stories file

const { Default } = composeStories(stories);

it('submits form successfully', async () => {
  window.scrollTo = jest.fn();

  render(<Default />);

  await waitFor(() => {
    expect(screen.getByText(/First Name/i)).toBeVisible();
  });

  userEvent.click(
    within(screen.getByTestId('first_name')).getByText('common:buttons.next')
  );

  await waitFor(() => {
    expect(screen.getByText(/Email/i)).toBeVisible();
  });

  const emailBlock = within(screen.getByTestId('email'));

  await userEvent.type(emailBlock.getByRole('textbox'), 'test@test.com');

  await waitFor(() => {
    expect(emailBlock.getByRole('textbox')).toHaveValue('test@test.com');
  });

  await waitFor(() => {
    expect(emailBlock.getByText('common:buttons.next')).not.toBeDisabled();
  });

  userEvent.click(emailBlock.getByText('common:buttons.next'));

  await waitFor(() => {
    expect(screen.getByText(/Phone/i)).toBeVisible();
  });

  userEvent.click(
    within(screen.getByTestId('phone')).getByText('common:buttons.next')
  );

  await userEvent.clear(emailBlock.getByRole('textbox'));

  userEvent.click(screen.getByText(/Submit/i));

  expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument();

  await userEvent.type(emailBlock.getByRole('textbox'), 'test@test.com');
  userEvent.click(screen.getByText(/Submit/i));
  await waitFor(() => {
    expect(screen.queryByTestId('loading-spinner')).toBeVisible();
  });
});
